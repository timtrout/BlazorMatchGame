@page "/"
@using System.Timers

<style>
    .container {
        width: 400px;
    }

    button {
        width: 100px;
        height: 100px;
        font-size: 50px;
    }
</style>
<div class="container">
    <div class="row">
        @for (var animalNumber = 0; animalNumber < shuffledAnimals.Count; animalNumber++)
        {
            var animal = shuffledAnimals[animalNumber];
            var uniqueDescription = $"Button #{animalNumber}";

            <div class="col-3">
                <button @onclick="@(() => ButtonClick(animal, uniqueDescription))"
                        type="button" class="btn btn-outline-dark">
                    <h1>@animal</h1>
                </button>
            </div>
        }
    </div>
    <div class="row">
        <h2>Matches found: @matchesFound</h2>
    </div>
    <div class="row">
        <h2>Time: @timeDisplay</h2>
    </div>
</div>

@code {
    List<string> animalEmoji = new()
    {
        "🐶",
        "🐶",
        "🐺",
        "🐺",
        "🐮",
        "🐮",
        "🦊",
        "🦊",
        "🐱",
        "🐱",
        "🦁",
        "🦁",
        "🐯",
        "🐯",
        "🐭",
        "🐭",
    };

    List<string> shuffledAnimals = new();
    int matchesFound = 0;
    int maxMatches = 0;
    Timer timer;
    int tenthsOfSecondsElasped = 0;
    string timeDisplay;

    protected override void OnInitialized()
    {
        timer = new Timer(100);
        timer.Elapsed += Timer_Tick;

        SetUpGame();
    }

    private void SetUpGame()
    {
        Random random = new();
        shuffledAnimals = animalEmoji
            .OrderBy(item => random.Next())
            .ToList();
        matchesFound = 0;
        maxMatches = shuffledAnimals.Count / 2;
        tenthsOfSecondsElasped = 0;
    }

    string lastAnimalFound = string.Empty;
    string lastDescription = string.Empty;


    private void ButtonClick(string animal, string animalDescription)
    {
        if (lastAnimalFound == string.Empty)
        {
            // First selection of the pari.  Remember it
            lastAnimalFound = animal;
            lastDescription = animalDescription;
            timer.Start();
        }
        else if ((lastAnimalFound == animal) && (animalDescription != lastDescription))
        {
            // Match found! Reset for the next pair.
            lastAnimalFound = string.Empty;

            shuffledAnimals = shuffledAnimals
                .Select(a => a.Replace(animal, string.Empty))
                .ToList();
            if (++matchesFound >= maxMatches)
            {
                timer.Stop();
                timeDisplay += " - Play Again?";

                SetUpGame();
            }
        }
        else
        {
            // User selected a pair that doesn't match.
            // Reset selection.
            lastAnimalFound = string.Empty;
            lastDescription = string.Empty;
        }
    }

    private void Timer_Tick(object source, ElapsedEventArgs e)
    {
        InvokeAsync(() =>
        {
            tenthsOfSecondsElasped++;
            timeDisplay = (tenthsOfSecondsElasped / 10F).ToString("0.0s");
            StateHasChanged();
        });
    }
}
